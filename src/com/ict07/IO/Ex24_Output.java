package com.ict07.IO;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;

//객체 직렬화 : ObjectOuputStream -> writeObject();
public class Ex24_Output {
	public static void main(String[] args) {
		// 직렬화 : 특정 클래스(Ex23_VO)를 객체로 만들어 특정 위치에 .ser 로 만들어 저장.
		//		  : 객체들이 가지고 있는 내용이 직렬화 되어있다. (정보를 제대로 볼 수 없다. 정보 확인은 Input을 통해)
		
		//특정 위치 파일명 지정
		String pathname = "c:"+File.separator+"Study_YH"+File.separator+"util"+File.separator+"ict07.ser";
		File file = new File(pathname);
		
		FileOutputStream fos = null;
		BufferedOutputStream bos = null;
		ObjectOutputStream oos = null;
		
		
		
		try {
			
			fos = new FileOutputStream(file);
			bos = new BufferedOutputStream(fos);
			oos = new ObjectOutputStream(bos); //Stream을 앞에 값과 연결 시키는 방식 : 체인방식
			
			//객체 직렬화를 하기 위한 객체 설정.
			
			Ex24_VO vo =new Ex24_VO("둘리", 28, 80.95, true);
			Ex24_VO vo1 =new Ex24_VO("고길동", 56, 77.43, true);
			Ex24_VO vo2 =new Ex24_VO("도우너", 15, 27.56, true);
			Ex24_VO vo3 =new Ex24_VO("마이콜", 34, 54.38, true);
			Ex24_VO vo4 =new Ex24_VO("또치", 24, 90.2, false);
			Ex24_VO vo5 =new Ex24_VO("희동이", 2, 8.7, true);
			
			//객체는 배열이나 컬렉션에 담을 수 있다.
			//아래의 과정을 부호화 : encoding 이라고 부름.
			
			ArrayList<Ex24_VO> list = new ArrayList<Ex24_VO>();
			list.add(vo);
			list.add(vo1);
			list.add(vo2);
			list.add(vo3);
			list.add(vo4);
			list.add(vo5);
			
			//객체 직렬화
			oos.writeObject(list);
			oos.flush();
			
		} catch (Exception e) {
		}finally {
			try {
				oos.close();
				bos.close();
				fos.close();
			
			} catch (Exception e2) {
			}
		}
	}
}
